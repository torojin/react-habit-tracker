{"ast":null,"code":"var _jsxFileName = \"/Users/woojin/Desktop/GitHub/Coding_personal_study/react-basic/habit-tracker/src/app-mine.jsx\";\nimport React, { Component } from 'react';\nimport './app.css';\nimport Habits from './components/habits';\nimport Navbar from './components/navbar';\nimport HabitAddForm from './components/habitAddForm'; //이 habits라는 컴포넌트 안에 전체적인 데이터가 들어있기 때문에 데이터가 삭제되거나 추가되거나 변경되는 경우,\n// 이 컴포넌트 안에서 수정하는 로직들을 가지고 있어야합니다.\n// 한 마디로 데이터를 가지고 있는 곳이 내가 이 데이터를 어떻게 수정하면 되는지 잘 알고 있는 최고의 장소이기 때문에\n// 여기에서 처리해주는 것이 가장 좋습니다.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      habits: [{\n        id: 1,\n        name: 'Reading',\n        count: 0\n      }, {\n        id: 2,\n        name: 'Running',\n        count: 0\n      }, {\n        id: 3,\n        name: 'Coding',\n        count: 0\n      }]\n    };\n\n    this.handleIncrement = habit => {\n      //PureComponents 적용전 코드\n      // const habits = [...this.state.habits]; //habits의 배열을 하나씩 복사해 오는 것.\n      // const index = habits.indexOf(habit); //arr.indexOf(searchElement)\n      // habits[index].count++;\n      const habits = this.state.habits.map(item => {\n        if (item.id === habit.id) {\n          return { ...habit,\n            count: habit.count + 1\n          }; //새로운 habit를 리턴, 기존의 habit에 있는 key와 value들이 하나하나씩 만들어진다. / 동일한 새로운 오브젝트가 만들어진다.\n        }\n\n        return item;\n      });\n      this.setState({\n        habits\n      }); //key와 value의 명칭이 같은 경우 하나로 작성해도 괜찮다. {habits:habits}= {habits} /value의 habits은 로컬 변수를 가르킨다.\n    };\n\n    this.handleDecrement = habit => {\n      // const habits = [...this.state.habits];\n      // const index = habits.indexOf(habit);\n      // const count = habits[index].count - 1;\n      // habits[index].count = count < 0 ? 0 : count; // 좋지 못한 코드\n      const habits = this.state.habits.map(item => {\n        if (item.id === habit.id) {\n          const count = habit.count - 1;\n          return { ...habit,\n            count: count < 0 ? 0 : count\n          };\n        }\n\n        return item;\n      });\n      this.setState({\n        habits\n      });\n    };\n\n    this.handleDelete = habit => {\n      const habits = this.state.habits.filter(item => item.id !== habit.id); //item.id와 habit.id의 값이 다를때 배열을 남기고 새로운 배열로 반환\n\n      this.setState({\n        habits\n      });\n    };\n\n    this.handleAdd = name => {\n      console.log('test: ' + name);\n      const habits = [...this.state.habits, {\n        id: Date.now(),\n        name: name,\n        count: 0\n      }];\n      this.setState({\n        habits\n      });\n    };\n\n    this.handleReset = () => {\n      // const habits = this.state.habits.map((habit) => {\n      //   habit.count = 0;\n      //   return habit;\n      // });\n      const habits = this.state.habits.map(habit => {\n        if (habit.count == 0) {\n          return { ...habit,\n            count: habit.count = 0\n          };\n        }\n\n        return habit;\n      });\n      this.setState({\n        habits\n      });\n    };\n  }\n\n  render() {\n    // console.log(this.state.habits.filter((item) => item.count > 0).length);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        totalCount: this.state.habits.filter(item => item.count > 0).length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(HabitAddForm, {\n        onAdd: this.handleAdd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Habits, {\n        habits: this.state.habits,\n        onIncrement: this.handleIncrement,\n        onDecrement: this.handleDecrement,\n        onDelete: this.handleDelete,\n        onReset: this.handleReset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/woojin/Desktop/GitHub/Coding_personal_study/react-basic/habit-tracker/src/app-mine.jsx"],"names":["React","Component","Habits","Navbar","HabitAddForm","App","state","habits","id","name","count","handleIncrement","habit","map","item","setState","handleDecrement","handleDelete","filter","handleAdd","console","log","Date","now","handleReset","render","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './app.css';\nimport Habits from './components/habits';\nimport Navbar from './components/navbar';\nimport HabitAddForm from './components/habitAddForm';\n\n//이 habits라는 컴포넌트 안에 전체적인 데이터가 들어있기 때문에 데이터가 삭제되거나 추가되거나 변경되는 경우,\n// 이 컴포넌트 안에서 수정하는 로직들을 가지고 있어야합니다.\n// 한 마디로 데이터를 가지고 있는 곳이 내가 이 데이터를 어떻게 수정하면 되는지 잘 알고 있는 최고의 장소이기 때문에\n// 여기에서 처리해주는 것이 가장 좋습니다.\nclass App extends Component {\n  state = {\n    habits: [\n      { id: 1, name: 'Reading', count: 0 },\n      { id: 2, name: 'Running', count: 0 },\n      { id: 3, name: 'Coding', count: 0 },\n    ],\n  };\n\n  // 숫자를 증가하고 감소한다는 것은 어떤 특정한 habit의 count를 증가하고 감소하는 거기 때문에\n  //인자로는 어떤 특정한 habit을 전달받으면 그 habit에 해당하는 count를 증가해주면 되겠죠.\n  handleIncrement = (habit) => {\n    //PureComponents 적용전 코드\n    // const habits = [...this.state.habits]; //habits의 배열을 하나씩 복사해 오는 것.\n    // const index = habits.indexOf(habit); //arr.indexOf(searchElement)\n    // habits[index].count++;\n    const habits = this.state.habits.map((item) => {\n      if (item.id === habit.id) {\n        return { ...habit, count: habit.count + 1 }; //새로운 habit를 리턴, 기존의 habit에 있는 key와 value들이 하나하나씩 만들어진다. / 동일한 새로운 오브젝트가 만들어진다.\n      }\n      return item;\n    });\n    this.setState({ habits }); //key와 value의 명칭이 같은 경우 하나로 작성해도 괜찮다. {habits:habits}= {habits} /value의 habits은 로컬 변수를 가르킨다.\n  };\n\n  handleDecrement = (habit) => {\n    // const habits = [...this.state.habits];\n    // const index = habits.indexOf(habit);\n    // const count = habits[index].count - 1;\n    // habits[index].count = count < 0 ? 0 : count; // 좋지 못한 코드\n    const habits = this.state.habits.map((item) => {\n      if (item.id === habit.id) {\n        const count = habit.count - 1;\n        return { ...habit, count: count < 0 ? 0 : count };\n      }\n      return item;\n    });\n    this.setState({ habits });\n  };\n\n  handleDelete = (habit) => {\n    const habits = this.state.habits.filter((item) => item.id !== habit.id); //item.id와 habit.id의 값이 다를때 배열을 남기고 새로운 배열로 반환\n    this.setState({ habits });\n  };\n\n  handleAdd = (name) => {\n    console.log('test: ' + name);\n    const habits = [\n      ...this.state.habits,\n      { id: Date.now(), name: name, count: 0 },\n    ];\n    this.setState({ habits });\n  };\n\n  handleReset = () => {\n    // const habits = this.state.habits.map((habit) => {\n    //   habit.count = 0;\n    //   return habit;\n    // });\n    const habits = this.state.habits.map((habit) => {\n      if (habit.count == 0) {\n        return { ...habit, count: (habit.count = 0) };\n      }\n      return habit;\n    });\n    this.setState({ habits });\n  };\n  render() {\n    // console.log(this.state.habits.filter((item) => item.count > 0).length);\n    return (\n      <>\n        <Navbar\n          totalCount={this.state.habits.filter((item) => item.count > 0).length}\n        />\n        <HabitAddForm onAdd={this.handleAdd} />\n        <Habits\n          habits={this.state.habits}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onDelete={this.handleDelete}\n          onReset={this.handleReset}\n        />\n      </>\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}