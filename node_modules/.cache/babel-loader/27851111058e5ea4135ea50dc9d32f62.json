{"ast":null,"code":"var _jsxFileName = \"/Users/woojin/Desktop/GitHub/Coding_personal_study/react-basic/habit-tracker/src/components/habits.jsx\";\nimport React, { Component } from 'react';\nimport Habit from './habit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Habits extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleIncrement = habit => {\n      const habits = [this.props.habit]; //habits의 배열을 하나씩 복사해 오는 것.\n\n      const index = habits.indexOf(habit); //arr.indexOf(searchElement)\n\n      habits[index].count++;\n      this.setState({\n        habits\n      }); //key와 value의 명칭이 같은 경우 하나로 작성해도 괜찮다. {habits:habits}= {habits} /value의 habits은 로컬 변수를 가르킨다.\n    };\n\n    this.handleDecrement = habit => {\n      const habits = [this.props.habit];\n      const index = habits.indexOf(habit);\n      const count = habits[index].count - 1;\n      habits[index].count = count < 0 ? 0 : count; // 좋지 못한 코드\n\n      this.setState({\n        habits\n      });\n    };\n\n    this.handleDelete = habit => {\n      console.log(this.props.habit.id);\n      console.log(habit.id);\n      const habits = this.props.habit.filter(item => item.id !== habit.id); //item.id와 habit.id의 값이 다를때 배열을 남기고 새로운 배열로 반환\n\n      this.setState({\n        habits\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children:\n      /*#__PURE__*/\n      //this.state.habits.map(arrayItem => (\n      //  <Habit propNameHabit={arrayItem}/>\n      _jsxDEV(Habit, {\n        habit: this.props.habit,\n        onIncrement: this.handleIncrement //habit.jsx에서 '+'를 클릭하면 onClick이 this.props.onIncrement(this.props.habit)를 전달\n        ,\n        onDecrement: this.handleDecrement,\n        onDelete: this.handleDelete\n      }, this.props.habit.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Habits;","map":{"version":3,"sources":["/Users/woojin/Desktop/GitHub/Coding_personal_study/react-basic/habit-tracker/src/components/habits.jsx"],"names":["React","Component","Habit","Habits","handleIncrement","habit","habits","props","index","indexOf","count","setState","handleDecrement","handleDelete","console","log","id","filter","item","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;;;AAEA,MAAMC,MAAN,SAAqBF,SAArB,CAA+B;AAAA;AAAA;;AAAA,SAG7BG,eAH6B,GAGVC,KAAD,IAAW;AAC3B,YAAMC,MAAM,GAAG,CAAC,KAAKC,KAAL,CAAWF,KAAZ,CAAf,CAD2B,CACQ;;AACnC,YAAMG,KAAK,GAAGF,MAAM,CAACG,OAAP,CAAeJ,KAAf,CAAd,CAF2B,CAEU;;AACrCC,MAAAA,MAAM,CAACE,KAAD,CAAN,CAAcE,KAAd;AACA,WAAKC,QAAL,CAAc;AAAEL,QAAAA;AAAF,OAAd,EAJ2B,CAIA;AAC5B,KAR4B;;AAAA,SAU7BM,eAV6B,GAUVP,KAAD,IAAW;AAC3B,YAAMC,MAAM,GAAG,CAAC,KAAKC,KAAL,CAAWF,KAAZ,CAAf;AACA,YAAMG,KAAK,GAAGF,MAAM,CAACG,OAAP,CAAeJ,KAAf,CAAd;AACA,YAAMK,KAAK,GAAGJ,MAAM,CAACE,KAAD,CAAN,CAAcE,KAAd,GAAsB,CAApC;AACAJ,MAAAA,MAAM,CAACE,KAAD,CAAN,CAAcE,KAAd,GAAsBA,KAAK,GAAG,CAAR,GAAY,CAAZ,GAAgBA,KAAtC,CAJ2B,CAIkB;;AAC7C,WAAKC,QAAL,CAAc;AAAEL,QAAAA;AAAF,OAAd;AACD,KAhB4B;;AAAA,SAkB7BO,YAlB6B,GAkBbR,KAAD,IAAW;AACxBS,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,KAAL,CAAWF,KAAX,CAAiBW,EAA7B;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYV,KAAK,CAACW,EAAlB;AACA,YAAMV,MAAM,GAAG,KAAKC,KAAL,CAAWF,KAAX,CAAiBY,MAAjB,CAAyBC,IAAD,IAAUA,IAAI,CAACF,EAAL,KAAYX,KAAK,CAACW,EAApD,CAAf,CAHwB,CAGgD;;AACxE,WAAKL,QAAL,CAAc;AAAEL,QAAAA;AAAF,OAAd;AACD,KAvB4B;AAAA;;AAyB7Ba,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAEI;AACA;AACA,cAAC,KAAD;AAEE,QAAA,KAAK,EAAE,KAAKZ,KAAL,CAAWF,KAFpB;AAGE,QAAA,WAAW,EAAE,KAAKD,eAHpB,CAGqC;AAHrC;AAIE,QAAA,WAAW,EAAE,KAAKQ,eAJpB;AAKE,QAAA,QAAQ,EAAE,KAAKC;AALjB,SACO,KAAKN,KAAL,CAAWF,KAAX,CAAiBW,EADxB;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,YADF;AAeD;;AAzC4B;;AA4C/B,eAAeb,MAAf","sourcesContent":["import React, { Component } from 'react';\nimport Habit from './habit';\n\nclass Habits extends Component {\n  // 숫자를 증가하고 감소한다는 것은 어떤 특정한 habit의 count를 증가하고 감소하는 거기 때문에\n  //인자로는 어떤 특정한 habit을 전달받으면 그 habit에 해당하는 count를 증가해주면 되겠죠.\n  handleIncrement = (habit) => {\n    const habits = [this.props.habit]; //habits의 배열을 하나씩 복사해 오는 것.\n    const index = habits.indexOf(habit); //arr.indexOf(searchElement)\n    habits[index].count++;\n    this.setState({ habits }); //key와 value의 명칭이 같은 경우 하나로 작성해도 괜찮다. {habits:habits}= {habits} /value의 habits은 로컬 변수를 가르킨다.\n  };\n\n  handleDecrement = (habit) => {\n    const habits = [this.props.habit];\n    const index = habits.indexOf(habit);\n    const count = habits[index].count - 1;\n    habits[index].count = count < 0 ? 0 : count; // 좋지 못한 코드\n    this.setState({ habits });\n  };\n\n  handleDelete = (habit) => {\n    console.log(this.props.habit.id);\n    console.log(habit.id);\n    const habits = this.props.habit.filter((item) => item.id !== habit.id); //item.id와 habit.id의 값이 다를때 배열을 남기고 새로운 배열로 반환\n    this.setState({ habits });\n  };\n\n  render() {\n    return (\n      <ul>\n        {\n          //this.state.habits.map(arrayItem => (\n          //  <Habit propNameHabit={arrayItem}/>\n          <Habit\n            key={this.props.habit.id}\n            habit={this.props.habit}\n            onIncrement={this.handleIncrement} //habit.jsx에서 '+'를 클릭하면 onClick이 this.props.onIncrement(this.props.habit)를 전달\n            onDecrement={this.handleDecrement}\n            onDelete={this.handleDelete}\n          />\n        }\n      </ul>\n    );\n  }\n}\n\nexport default Habits;\n"]},"metadata":{},"sourceType":"module"}