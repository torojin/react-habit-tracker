{"ast":null,"code":"var _jsxFileName = \"/Users/woojin/Desktop/GitHub/Coding_personal_study/react-basic/habit-tracker/src/app-mine.jsx\";\nimport React, { Component } from 'react';\nimport './app.css';\nimport Habits from './components/habits';\nimport Navbar from './components/navbar';\nimport Add from './components/habitAddForm'; //이 habits라는 컴포넌트 안에 전체적인 데이터가 들어있기 때문에 데이터가 삭제되거나 추가되거나 변경되는 경우,\n// 이 컴포넌트 안에서 수정하는 로직들을 가지고 있어야합니다.\n// 한 마디로 데이터를 가지고 있는 곳이 내가 이 데이터를 어떻게 수정하면 되는지 잘 알고 있는 최고의 장소이기 때문에\n// 여기에서 처리해주는 것이 가장 좋습니다.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      habits: [{\n        id: 1,\n        name: 'Reading',\n        count: 0\n      }, {\n        id: 2,\n        name: 'Running',\n        count: 0\n      }, {\n        id: 3,\n        name: 'Coding',\n        count: 0\n      }],\n      name: ''\n    };\n\n    this.handleIncrement = habit => {\n      const habits = [...this.state.habits]; //habits의 배열을 하나씩 복사해 오는 것.\n\n      const index = habits.indexOf(habit); //arr.indexOf(searchElement)\n\n      habits[index].count++;\n      this.setState({\n        habits\n      }); //key와 value의 명칭이 같은 경우 하나로 작성해도 괜찮다. {habits:habits}= {habits} /value의 habits은 로컬 변수를 가르킨다.\n    };\n\n    this.handleDecrement = habit => {\n      const habits = [...this.state.habits];\n      const index = habits.indexOf(habit);\n      const count = habits[index].count - 1;\n      habits[index].count = count < 0 ? 0 : count; // 좋지 못한 코드\n\n      this.setState({\n        habits\n      });\n    };\n\n    this.handleDelete = habit => {\n      const habits = this.state.habits.filter(item => item.id !== habit.id); //item.id와 habit.id의 값이 다를때 배열을 남기고 새로운 배열로 반환\n\n      this.setState({\n        habits\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        name: event.target.value\n      });\n    };\n\n    this.handleAdd = () => {\n      const habits = this.state.habits;\n      const id = new Date().getTime();\n      habits.push({\n        id: id,\n        name: this.state.name,\n        count: 0\n      });\n      this.setState({\n        habits\n      });\n    };\n  }\n\n  render() {\n    console.log(this.state.habits.filter(item => item.count > 0).length);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        totalCount: this.state.habits.filter(item => item.count > 0).length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Add, {\n        onChange: this.handleChange,\n        onAdd: this.handleAdd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Habits, {\n        habits: this.state.habits,\n        onIncrement: this.handleIncrement,\n        onDecrement: this.handleDecrement,\n        onDelete: this.handleDelete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/woojin/Desktop/GitHub/Coding_personal_study/react-basic/habit-tracker/src/app-mine.jsx"],"names":["React","Component","Habits","Navbar","Add","App","state","habits","id","name","count","handleIncrement","habit","index","indexOf","setState","handleDecrement","handleDelete","filter","item","handleChange","event","target","value","handleAdd","Date","getTime","push","render","console","log","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './app.css';\nimport Habits from './components/habits';\nimport Navbar from './components/navbar';\nimport Add from './components/habitAddForm';\n\n//이 habits라는 컴포넌트 안에 전체적인 데이터가 들어있기 때문에 데이터가 삭제되거나 추가되거나 변경되는 경우,\n// 이 컴포넌트 안에서 수정하는 로직들을 가지고 있어야합니다.\n// 한 마디로 데이터를 가지고 있는 곳이 내가 이 데이터를 어떻게 수정하면 되는지 잘 알고 있는 최고의 장소이기 때문에\n// 여기에서 처리해주는 것이 가장 좋습니다.\nclass App extends Component {\n  state = {\n    habits: [\n      { id: 1, name: 'Reading', count: 0 },\n      { id: 2, name: 'Running', count: 0 },\n      { id: 3, name: 'Coding', count: 0 },\n    ],\n    name: '',\n  };\n\n  // 숫자를 증가하고 감소한다는 것은 어떤 특정한 habit의 count를 증가하고 감소하는 거기 때문에\n  //인자로는 어떤 특정한 habit을 전달받으면 그 habit에 해당하는 count를 증가해주면 되겠죠.\n  handleIncrement = (habit) => {\n    const habits = [...this.state.habits]; //habits의 배열을 하나씩 복사해 오는 것.\n    const index = habits.indexOf(habit); //arr.indexOf(searchElement)\n    habits[index].count++;\n    this.setState({ habits }); //key와 value의 명칭이 같은 경우 하나로 작성해도 괜찮다. {habits:habits}= {habits} /value의 habits은 로컬 변수를 가르킨다.\n  };\n\n  handleDecrement = (habit) => {\n    const habits = [...this.state.habits];\n    const index = habits.indexOf(habit);\n    const count = habits[index].count - 1;\n    habits[index].count = count < 0 ? 0 : count; // 좋지 못한 코드\n    this.setState({ habits });\n  };\n\n  handleDelete = (habit) => {\n    const habits = this.state.habits.filter((item) => item.id !== habit.id); //item.id와 habit.id의 값이 다를때 배열을 남기고 새로운 배열로 반환\n    this.setState({ habits });\n  };\n\n  handleChange = (event) => {\n    this.setState({ name: event.target.value });\n  };\n  handleAdd = () => {\n    const habits = this.state.habits;\n    const id = new Date().getTime();\n    habits.push({ id: id, name: this.state.name, count: 0 });\n    this.setState({ habits });\n  };\n  render() {\n    console.log(this.state.habits.filter((item) => item.count > 0).length);\n    return (\n      <>\n        <Navbar\n          totalCount={this.state.habits.filter((item) => item.count > 0).length}\n        />\n        <Add onChange={this.handleChange} onAdd={this.handleAdd} />\n        <Habits\n          habits={this.state.habits}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onDelete={this.handleDelete}\n        />\n      </>\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}